1. Instalirati Composer
https://getcomposer.org/doc/00-intro.md#installation-windows

2. Kreiranje projekta
a. Navigacija do foldera koji će sadržavati my-project
b. composer create-project symfony/website-skeleton my-project
https://symfony.com/doc/current/setup.html

Napomena:
* Tradicionalne web aplikacije: website-skeleton
* Mikroservisi, console aplikacije i API: skeleton

3. Pokretanje projekta
a. cd my-project
b. php bin/console server:run
c. http://localhost:8000/ u browseru

Tu koristimo Symfony PHP Web server za razvoj.

4. git init, add, commit

.gitignore su već uključeni u projekt.

-----

Dodavanje postojećeg projekta:
1. git clone
2. cd project
3. composer install
4. prikaz informacija pomoću "php bin/console about"
5. (možda) podešavanje .env datoteke i projekta
https://symfony.com/doc/current/configuration.html#config-dot-env

-----

Security checker: https://github.com/sensiolabs/security-checker#integration

-----

Rađenje stranice
1. Kreiranje kontrolera
https://symfony.com/doc/current/page_creation.html

Bitno je napraviti metodu u kontroleru koja će se onda povezati s rutom.
Također je dobro vratiti response s return new Response('html');

2. Povezivanje metode s rutom - 2 načina:
 a. config/routes.yaml
 b. anotacije u php-u (uključiti s composer require annotations)

a.
app_lucky_number:
    path: /lucky/number
    controller: App\Controller\LuckyController::number

b. 
/**
* @Route("/lucky/number")
*/

Vraćanje templatea
1. class Controller extends AbstractController
2. Renderamo Twig
return $this->render('lucky/number.html.twig', [
    'number' => $number,
]);

Templatei se nalaze u templates folderu

Twig:
{{ varijabla }}

Web Debug Toolbar - za njega treba <body> tag
Većinu vremena provodimo u src, config ili templates